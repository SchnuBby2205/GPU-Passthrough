https://www.youtube.com/watch?v=uOuzFd8Gd2o

***
vt-d muss enabled sein
und ich musste die onboard grafikkarte also primary (erste karte von der gebooted wird) hinterlegen 
beides im bios
***

sudo pacman -S virt-manager virt-viewer qemu vde2 ebtables iptables-nft nftables dnsmasq bridge-utils ovmf swtpm
!!!!!! achtung libvirtd.service muss laufen (sudo systemctl enable libvirtd.service) (sudo systemctl start -now libvirtd.service) !!!!!
sudi virsh net-start default ?? als service ? 
create new vm
code /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="rd.driver.pre=vfio-pci intel_iommu=on iommu=pt video=efifb:off vfio_iommu_type1.allow_unsafe_interrupts=1 CONFIG_FTRACE=y CONFIG_KPROBES=y CONFIG_PCI_QUIRKS=y CONFIG_KALLSYMS=y CONFIG_KALLSYMS_ALL=y CONFIG_FUNCTION_TRACER=y ....

komplette momentan funktionierende kernel parameter
GRUB_CMDLINE_LINUX_DEFAULT="rd.driver.blacklist=radeon amdgpu.si_support=1 amdgpu.cik_support=1 rd.driver.pre=vfio-pci intel_iommu=on iommu=pt video=efifb:off vfio_iommu_type1.allow_unsafe_interrupts=1 CONFIG_FTRACE=y CONFIG_KPROBES=y CONFIG_PCI_QUIRKS=y CONFIG_KALLSYMS=y CONFIG_KALLSYMS_ALL=y CONFIG_FUNCTION_TRACER=y loglevel=3 quiet"

vfio_iommu_type1.allow_unsafe_interrupts=1 // nur wenn lock memory fehler kommt
***
(muss vendor reset installiert werden folgendes hinzufügen:)
CONFIG_FTRACE=y CONFIG_KPROBES=y CONFIG_PCI_QUIRKS=y CONFIG_KALLSYMS=y CONFIG_KALLSYMS_ALL=y CONFIG_FUNCTION_TRACER=y 
danach muss die modprobe.conf angepasst werden. bei modules vendor-reset ALS ERSTES EINFÜGEN!!
und das vendor-reset git repository https://github.com/SchnuBby2205/vendor-reset
hierzu braucht man zusätzlich dkms und die Linux headers für das Kernel (yay -S linux-lts-headers)
der vendor-reset kann dann mit sudo dkms install . iunstlaliert werden.
***

sudo grub-mkconfig -o /boot/grub/grub.cfg
reboot

then test iommu groups

#!/bin/bash
#  _____         _     _                                  
# |_   _|__  ___| |_  (_) ___  _ __ ___  _ __ ___  _   _  
#   | |/ _ \/ __| __| | |/ _ \| '_ ` _ \| '_ ` _ \| | | | 
#   | |  __/\__ \ |_  | | (_) | | | | | | | | | | | |_| | 
#   |_|\___||___/\__| |_|\___/|_| |_| |_|_| |_| |_|\__,_| 
#                                                         
# by Stephan Raabe (2023) 
# ----------------------------------------------------- 

shopt -s nullglob
for g in /sys/kernel/iommu_groups/*; do
    echo "IOMMU Group ${g##*/}:"
    for d in $g/devices/*; do
        echo -e "\t$(lspci -nns ${d##*/})"
    done;
done;

Should look like this

copy id of the gpu and HDMI audio (1002:731f,1002:ab38)
code /etc/mkinitcpio.conf
MODULES=(vfio_pci vfio vfio_iommu_type1)
make sure HOOKS has modconf
sudo mkinitcpio -p [kernel] (linux or linux-lts...)
sudo touch /etc/modprobe.d/vfio.conf
code /etc/modprobe.d/vfio.conf
options vfio-pci ids=1002:731f,1002:ab38
reboot
test vfio
dmesg | grep -i vfio
pass the pci to the vm

der benutzer in der kvm und libvirt gruppe sein
sudo usermod -aG kvm,libvirt schnubby

***
(Hier noch testen ob die VM bzw libvirt nicht über qemu:///system statt qemu:///session laufen muss)
!!!!!! achtung libvirtd.service muss laufen (sudo systemctl enable libvirtd.service) (sudo systemctl start -now libvirtd.service) !!!!!
Dann kann man sich folgende Befehle sparen:
sudo chown root:kvm /dev/input/by-path/pci-0000:00:14.0-usb-0:5:1.0-event-kbd
sudo chown root:kvm /dev/input/by-id/usb-Kingsis_Peripherals_ZOWIE_Gaming_mouse-event-mouse
sudo chown root:kvm /dev/vfio/14 
sudo chmod 0660 /dev/input/by-path/pci-0000:00:14.0-usb-0:5:1.0-event-kbd
sudo chmod 0660 /dev/input/by-id/usb-Kingsis_Peripherals_ZOWIE_Gaming_mouse-event-mouse
sudo chmod 0660 /dev/vfio/14
***

für tastatur und maus in der VMl einfügen:
    <input type="evdev">
      <source dev="/dev/input/by-id/usb-Kingsis_Peripherals_ZOWIE_Gaming_mouse-event-mouse"/>
    </input>
    <input type="evdev">
      <source dev="/dev/input/by-path/pci-0000:00:14.0-usb-0:5:1.0-event-kbd" grab="all" grabToggle="ctrl-ctrl" repeat="on"/>
    </input>


folgende aliase in .zshrc anlegen um graka zu switchen
die befehle befinden sich schon in der userprefs_vfio.conf
alias amd-enable='sudo virsh nodedev-reattach pci_0000_03_00_0 && echo "GPU reattached (now host ready)" &&  sudo rmmod vfio_pci vfio_pci_core vfio_iommu_type1 && echo "VFIO drivers removed" && sudo modprobe -i amdgpu && echo "AMD drivers added" && echo "COMPLETED!"'
alias amd-disable='sudo rmmod amdgpu && echo "AMD drivers removed" && sudo modprobe -i vfio_pci vfio_pci_core vfio_iommu_type1 && echo "VFIO drivers added" && sudo virsh nodedev-detach pci_0000_03_00_0 && echo "GPU detached (now vfio ready)" && echo "COMPLETED!"'
sollten die alias nicht funktionieren einmal (0000:03... ist die id der graka - lspci -nnk)
echo "0000:03:00.0" > /sys/bus/pci/drivers/amdgpu/bind 
ausführen ACHTUNG muss als root (su - root) ausgeführt werden.

****
LOOKING GLASS (https://looking-glass.io/downloads)
https://looking-glass.io/artifact/stable/source
cd Downloads
tar -xzvf looking-glass-B6.tar.gz
cd looking-glass-B6

mkdir client/build
cd client/build
cmake ../
make
sudo make install

ACHTUNG yay -S libxpresent kann ausgeführt werden wenn xpresent fehlt

add to vm under devices
<shmem name='looking-glass'>
  <model type='ivshmem-plain'/>
  <size unit='M'>32</size>
</shmem>

in der vm looking glass host laden (https://looking-glass.io/downloads)
https://looking-glass.io/artifact/stable/host

alias für .zshrc
alias looking-glass='looking-glass-client -s -m 97'
kann auch in der userprefs.conf unter hypr hinterlegt werden.
bind = $mainMod+Ctrl, V, exec, looking-glass-client -s -m 97
****
